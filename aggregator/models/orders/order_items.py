from django.db import models

from aggregator.models.orders.order_details import OrderDetail


class OrderItem(models.Model):
    amount_refunded = models.FloatField()
    base_amount_refunded = models.FloatField()
    base_discount_amount = models.FloatField()
    base_discount_invoiced = models.FloatField()
    base_discount_tax_compensation_amount = models.FloatField()
    base_original_price = models.FloatField()
    base_price = models.FloatField()
    base_price_incl_tax = models.FloatField()
    base_row_invoiced = models.FloatField()
    base_row_total = models.FloatField()
    base_row_total_incl_tax = models.FloatField()
    base_tax_amount = models.FloatField()
    base_tax_invoiced = models.FloatField()
    created_at = models.DateTimeField()
    discount_amount = models.FloatField()
    discount_invoiced = models.FloatField()
    discount_percent = models.FloatField()
    free_shipping = models.IntegerField()
    discount_tax_compensation_amount = models.FloatField()
    is_qty_decimal = models.IntegerField()
    is_virtual = models.IntegerField()
    item_id = models.IntegerField()
    name = models.TextField()
    no_discount = models.IntegerField()
    original_price = models.FloatField()
    price = models.FloatField()
    price_incl_tax = models.FloatField()
    product_id = models.BigIntegerField()
    product_type = models.TextField()
    qty_canceled = models.IntegerField()
    qty_invoiced = models.IntegerField()
    qty_ordered = models.IntegerField()
    qty_shipped = models.IntegerField()
    quote_item_id = models.BigIntegerField()
    row_invoiced = models.IntegerField()
    row_total = models.FloatField()
    row_total_incl_tax = models.IntegerField()
    row_weight = models.IntegerField()
    sku = models.TextField()
    store_id = models.BigIntegerField()
    tax_amount = models.FloatField()
    tax_invoiced = models.IntegerField()
    tax_percent = models.FloatField()
    updated_at = models.DateTimeField()
    weight = models.FloatField()
    order_id = models.ForeignKey(OrderDetail, on_delete=models.PROTECT, related_name='items')

    class Meta:
        db_table = 'order_items'
